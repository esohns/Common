set (OPENGL_SUPPORT_DEFAULT ON)
set (OPENGL_USE_DEFAULT ON)
if (${CMAKE_VERSION} VERSION_GREATER "3.10")
 cmake_policy (SET CMP0072 NEW) # set OpenGL_GL_PREFERENCE to LEGACY|GLVND
endif (${CMAKE_VERSION} VERSION_GREATER "3.10")
include (FindOpenGL)
if (NOT OPENGL_FOUND)
 if (UNIX)
# set (OpenGL_Components "OpenGL EGL GLX")
  set (OpenGL_Components "OpenGL")
 elseif (WIN32)
  set (OpenGL_Components "OpenGL")
 endif ()
 find_package (OpenGL MODULE
               COMPONENTS ${OpenGL_Components})
 if (OpenGL_FOUND)
  message (STATUS "Found OpenGL package")
  set (OPENGL_FOUND TRUE)
  set (OPENGL_INCLUDE_DIR ${OpenGL_INCLUDE_DIRS})
  set (OPENGL_LIBRARIES ${OpenGL_LIBRARIES})
 endif (OpenGL_FOUND)
 if (NOT OPENGL_FOUND)
  if (UNIX)
   set (OPENGL_HEADER_FILE GL/gl.h)
   set (OPENGL_LIB_FILE libGL.so)
  elseif (WIN32)
   set (OPENGL_HEADER_FILE gl/GL.h)
   set (OPENGL_LIB_FILE OpenGL32.lib)
  endif ()
  find_path (OPENGL_INCLUDE_DIR
             NAMES ${OPENGL_HEADER_FILE}
             DOC "searching for ${OPENGL_HEADER_FILE}")
  if (NOT OPENGL_INCLUDE_DIR)
   message (WARNING "could not find ${OPENGL_LIB_FILE}, continuing")
  else ()
   message (STATUS "Found OpenGL header \"${OPENGL_INCLUDE_DIR}\"")
  endif (NOT OPENGL_INCLUDE_DIR)
  find_library (OPENGL_LIBRARY
                NAMES ${OPENGL_LIB_FILE}
                DOC "searching for ${OPENGL_LIB_FILE}")
  if (NOT OPENGL_LIBRARY)
   message (WARNING "could not find ${OPENGL_LIB_FILE}, continuing")
  else ()
   message (STATUS "Found OpenGL library \"${OPENGL_LIBRARY}\"")
  endif (NOT OPENGL_LIBRARY)
  if (OPENGL_INCLUDE_DIR AND OPENGL_LIBRARY)
   set (OPENGL_FOUND TRUE)
   set (OPENGL_LIBRARIES ${OPENGL_LIBRARY})
  endif ()
 endif (NOT OPENGL_FOUND)
else ()
 message (STATUS "Found OpenGL")
endif (NOT OPENGL_FOUND)
if (OPENGL_FOUND)
 option (OPENGL_SUPPORT "enable OpenGL support" ${OPENGL_SUPPORT_DEFAULT})
 if (OPENGL_SUPPORT)
  add_definitions (-DOPENGL_SUPPORT)
  if (WIN32)
   add_definitions (-D_USE_MATH_DEFINES) # M_PI
  endif (WIN32)
 endif (OPENGL_SUPPORT)
endif (OPENGL_FOUND)
if (OPENGL_SUPPORT)
 option (OPENGL_USE "enable OpenGL" ${OPENGL_USE_DEFAULT})
 if (OPENGL_USE)
  add_definitions (-DOPENGL_USE)
 endif (OPENGL_USE)
endif (OPENGL_SUPPORT)

##########################################

# *TODO*: FindGLUT.cmake is currently broken
find_package (GLUT)
if (NOT GLUT_FOUND)
 if (UNIX)
  set (GLUT_LIB_FILE libglut.so)
  find_library (GLUT_LIBRARY ${GLUT_LIB_FILE}
                PATHS /usr /usr/lib
                PATH_SUFFIXES lib64 x86_64-linux-gnu
                DOC "searching for ${GLUT_LIB_FILE}")
  if (GLUT_LIBRARY)
   message (STATUS "Found Glut library \"${GLUT_LIBRARY}\"")
   set (GLUT_FOUND TRUE)
#   set (GLUT_INCLUDE_DIR "/usr/include")
   set (GLUT_LIBRARIES "${GLUT_LIBRARY}")
  else ()
   message (WARNING "could not find ${GLUT_LIB_FILE}, continuing")
  endif (GLUT_LIBRARY)
 elseif (WIN32)
# unset (LIB_FILE_SUFFIX)
  set (GLUT_LIB_FILE freeglut)
#     if (CMAKE_BUILD_TYPE STREQUAL Debug)
#      set (LIB_FILE_SUFFIX d)
#     endif ()
#  set (GLUT_LIB_FILE ${GLUT_LIB_FILE}${LIB_FILE_SUFFIX}.lib)
  find_library (GLUT_LIBRARY ${GLUT_LIB_FILE}
                PATHS $ENV{LIB_ROOT}/freeglut
                PATH_SUFFIXES lib
                DOC "searching for ${GLUT_LIB_FILE}")
  if (GLUT_LIBRARY)
   message (STATUS "Found Glut library \"${GLUT_LIBRARY}\"")
   set (GLUT_FOUND TRUE)
   set (GLUT_INCLUDE_DIR "$ENV{LIB_ROOT}/freeglut/include")
   set (GLUT_LIBRARIES "${GLUT_LIBRARY}")
   set (GLUT_LIB_DIR "$ENV{LIB_ROOT}/freeglut/bin")
  else ()
   message (WARNING "could not find ${GLUT_LIB_FILE}, continuing")
  endif (GLUT_LIBRARY)
 endif ()
endif (NOT GLUT_FOUND)
if (OPENGL_FOUND AND GLUT_FOUND)
 option (GLUT_SUPPORT "enable OpenGL GLUT support" ON)
 if (GLUT_SUPPORT)
  add_definitions (-DGLUT_SUPPORT)
  set (OPENGL_INCLUDE_DIR "${OPENGL_INCLUDE_DIR};${GLUT_INCLUDE_DIR}")
  set (OPENGL_LIBRARIES "${OPENGL_LIBRARY};${GLUT_LIBRARIES}")
  set (OPENGL_LIB_DIR "${GLUT_LIB_DIR}")
 endif (GLUT_SUPPORT)
endif (OPENGL_FOUND AND GLUT_FOUND)
