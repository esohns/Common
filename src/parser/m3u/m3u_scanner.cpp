  #include "common_iparser.h"

  #include "m3u_parser.h"

#if defined (M3U_IN_HEADER)
class M3U_IParser;
#else
#define YY_STRUCT_YY_BUFFER_STATE
  #include "m3u_scanner.h"

  #include "common_parser_m3u_iparser.h"
#undef YY_STRUCT_YY_BUFFER_STATE
#endif

#define YY_DECL                                     \
int                                                 \
M3U_lex (yy::parser::semantic_type* yylval,   \
         yy::parser::location_type* location, \
         M3U_IParser_t* parser,               \
         yyscan_t yyscanner)
// ... and declare it for the parser's sake
extern YY_DECL;

/*#define YY_EXTRA_TYPE*/



#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */








/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */


#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif













/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define M3U__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer M3U__create_buffer
#endif

    
#ifdef yy_delete_buffer
#define M3U__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer M3U__delete_buffer
#endif

    
#ifdef yy_scan_buffer
#define M3U__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer M3U__scan_buffer
#endif

    
#ifdef yy_scan_string
#define M3U__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string M3U__scan_string
#endif

    
#ifdef yy_scan_bytes
#define M3U__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes M3U__scan_bytes
#endif

    
#ifdef yy_init_buffer
#define M3U__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer M3U__init_buffer
#endif

    
#ifdef yy_flush_buffer
#define M3U__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer M3U__flush_buffer
#endif

    
#ifdef yy_load_buffer_state
#define M3U__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state M3U__load_buffer_state
#endif

    
#ifdef yy_switch_to_buffer
#define M3U__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer M3U__switch_to_buffer
#endif

    
#ifdef yypush_buffer_state
#define M3U_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state M3U_push_buffer_state
#endif

    
#ifdef yypop_buffer_state
#define M3U_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state M3U_pop_buffer_state
#endif

    
#ifdef yyensure_buffer_stack
#define M3U_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack M3U_ensure_buffer_stack
#endif

    
#ifdef yylex
#define M3U_lex_ALREADY_DEFINED
#else
#define yylex M3U_lex
#endif

    
#ifdef yyrestart
#define M3U_restart_ALREADY_DEFINED
#else
#define yyrestart M3U_restart
#endif

    
#ifdef yylex_init
#define M3U_lex_init_ALREADY_DEFINED
#else
#define yylex_init M3U_lex_init
#endif

    
#ifdef yylex_init_extra
#define M3U_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra M3U_lex_init_extra
#endif

    
#ifdef yylex_destroy
#define M3U_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy M3U_lex_destroy
#endif

    
#ifdef yyget_debug
#define M3U_get_debug_ALREADY_DEFINED
#else
#define yyget_debug M3U_get_debug
#endif

    
#ifdef yyset_debug
#define M3U_set_debug_ALREADY_DEFINED
#else
#define yyset_debug M3U_set_debug
#endif

    
#ifdef yyget_extra
#define M3U_get_extra_ALREADY_DEFINED
#else
#define yyget_extra M3U_get_extra
#endif

    
#ifdef yyset_extra
#define M3U_set_extra_ALREADY_DEFINED
#else
#define yyset_extra M3U_set_extra
#endif

    
#ifdef yyget_in
#define M3U_get_in_ALREADY_DEFINED
#else
#define yyget_in M3U_get_in
#endif

    
#ifdef yyset_in
#define M3U_set_in_ALREADY_DEFINED
#else
#define yyset_in M3U_set_in
#endif

    
#ifdef yyget_out
#define M3U_get_out_ALREADY_DEFINED
#else
#define yyget_out M3U_get_out
#endif

    
#ifdef yyset_out
#define M3U_set_out_ALREADY_DEFINED
#else
#define yyset_out M3U_set_out
#endif

    
#ifdef yyget_leng
#define M3U_get_leng_ALREADY_DEFINED
#else
#define yyget_leng M3U_get_leng
#endif

    
#ifdef yyget_text
#define M3U_get_text_ALREADY_DEFINED
#else
#define yyget_text M3U_get_text
#endif

    
#ifdef yyget_lineno
#define M3U_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno M3U_get_lineno
#endif

    
#ifdef yyset_lineno
#define M3U_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno M3U_set_lineno
#endif

    
        
#ifdef yyget_column
#define M3U_get_column_ALREADY_DEFINED
#else
#define yyget_column M3U_get_column
#endif

        
#ifdef yyset_column
#define M3U_set_column_ALREADY_DEFINED
#else
#define yyset_column M3U_set_column
#endif

    
    
#ifdef yywrap
#define M3U_wrap_ALREADY_DEFINED
#else
#define yywrap M3U_wrap
#endif


/* %endif */






#ifdef yyalloc
#define M3U_alloc_ALREADY_DEFINED
#else
#define yyalloc M3U_alloc
#endif

    
#ifdef yyrealloc
#define M3U_realloc_ALREADY_DEFINED
#else
#define yyrealloc M3U_realloc
#endif

    
#ifdef yyfree
#define M3U_free_ALREADY_DEFINED
#else
#define yyfree M3U_free
#endif



/* %if-c-only */


/* %endif */




/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */


/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */




/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

















/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r



/* %endif */



/* %if-not-reentrant */
/* %endif */







/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0


/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif


/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))



#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )


#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */


	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */


	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]


/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );


static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)


YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );


#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;


typedef int yy_state_type;

#define yytext_ptr yytext_r


/* %% [1.5] DFA */


/* %if-c-only Standard (non-C++) definition */


static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );


/* %endif */


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 44
#define YY_END_OF_BUFFER 45
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int32_t yy_acclist[169] =
    {   0,
       45,   43,   44,   13,   43,   44,   43,   44,   43,   44,
       14,   43,   44,   43,   44,   43,   44,16399,   16,   43,
       44,   43,   44,16399,   43,   44,16401,   18,   43,   44,
       43,   44,16401,   43,   44,   20,   43,   44,   43,   44,
    16405,   22,   43,   44,   43,   44,16405,   43,   44,   24,
       43,   44,   43,   44,   28,   43,   44,   43,   44,   43,
       44,   43,   44,16409,   26,   43,   44,   43,   44,16409,
       43,   44,   32,   43,   44,   43,   44,   36,   43,   44,
       43,   44,   43,   44,   43,   44,16417,   34,   43,   44,
       43,   44,16417,   40,   43,   44,   40,   43,   44,   43,

       44,16425,   42,   43,   44,   43,   44,16425,   13,   14,
    16399, 8207,16399, 8207,   16,16401, 8209,16401, 8209,   18,
       19,16405, 8213,16405, 8213,   22,   23,   27,   29,   30,
    16409, 8217,16409, 8217,   26,   31,   35,   37,   38,16417,
     8225,16417, 8225,   34,16425, 8233,16425, 8233,   42, 8207,
     8209, 8213, 8217, 8225, 8233,    1,   12,    7,    5,   11,
        4,    8,    6,    3,   10,   39,    2,    9
    } ;

static const flex_int32_t yy_accept[284] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    7,    9,   11,   14,   16,
       19,   22,   25,   28,   31,   34,   36,   39,   42,   45,
       48,   50,   53,   55,   58,   60,   62,   65,   68,   71,
       73,   76,   78,   81,   83,   85,   88,   91,   94,   97,
      100,  103,  106,  109,  110,  110,  111,  112,  113,  114,
      116,  117,  118,  119,  121,  121,  122,  123,  124,  125,
      127,  127,  128,  128,  129,  129,  130,  131,  132,  133,

      134,  136,  136,  137,  137,  138,  138,  139,  140,  141,
      142,  143,  145,  145,  146,  147,  148,  150,  150,  151,
      152,  153,  154,  155,  155,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  161,  161,  161,  162,  162,
      162,  162,  162,  162,  162,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  164,
      164,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  166,  167,  167,  167,  167,  168,  168,
      168,  169,  169
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    6,    7,    1,    1,    1,    1,    1,
        8,    1,    1,    1,    1,    1,    1,    9,    1,    1,
       10,    1,    1,    1,   11,    1,   12,   13,   14,   15,
       16,   17,   18,    1,    1,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[33] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static const flex_int32_t yy_base[311] =
    {   0,
        0,    4,    8,   10,   12,   14,   16,   18,  301,  300,
       20,   22,  295,  294,  297,  296,  297,  296,   24,   26,
      289,  288,  291,  290,  291,  290,   28,   30,   32,   33,
       37,   39,  293,  308,  308,  290,  277,  308,  288,   41,
      308,   43,   45,  308,   47,  283,  308,   49,  308,   51,
      278,  308,  281,  308,  282,  279,   53,  308,   55,  274,
      308,  277,  308,  278,  275,   57,  308,   59,  308,  266,
       61,  308,   63,  308,  248,  308,   65,  308,   67,  308,
       69,  308,   71,  308,  272,  308,   73,  308,   75,  308,
      267,  308,  270,  308,  271,  308,  308,   77,  308,   79,

      308,  264,  308,  267,  308,  268,  308,  308,   81,  308,
       83,  308,  240,   85,  308,   87,  308,  243,  308,  308,
      308,  308,  308,  242,  308,   84,  261,  236,  245,  257,
      233,  256,  247,  233,  253,   94,  250,  308,  235,  238,
      238,  234,  240,  228,  225,  240,  236,  308,  224,  229,
      221,  233,  232,  222,  218,  217,  216,  218,  217,  226,
      223,  218,  219,  220,  217,  206,  215,  200,  207,  205,
      216,  201,  214,  210,  205,  197,  214,  199,  205,   85,
      207,  197,  189,  193,  203,  201,  185,  190,  184,  308,
      189,  201,  194,  185,  185,  193,  185,  189,  187,  193,

      181,  170,  188,  189,  183,  173,  179,  168,  178,  169,
      164,  308,  175,  170,  158,  164,  156,  172,  167,  170,
      169,  165,  160,  150,  162,  148,  165,  146,  145,  162,
      143,  162,  147,  153,  308,  148,  151,  308,  132,  137,
      150,  154,  138,  152,  151,  143,  142,  128,  133,  126,
      126,  135,  141,  131,  139,  129,  132,  125,  308,  124,
      308,  123,  118,  127,  126,  125,  110,  116,  127,  126,
      120,  106,  308,  308,  111,  105,  118,  308,  115,  119,
      308,  308,  126,  125,  124,  123,  121,  118,  117,  115,
      114,  112,  110,  109,  108,  107,  105,  102,  100,   99,

       98,   97,   96,   95,   94,   92,   35,    7,    3,    0
    } ;

static const flex_int32_t yy_def[311] =
    {   0,
      283,  283,  283,  283,  284,  284,  285,  285,  286,  286,
      287,  287,  288,  288,  289,  289,  290,  290,  291,  291,
      292,  292,  293,  293,  294,  294,  295,  295,  296,  296,
      297,  297,  282,  282,  282,  282,  282,  282,  282,  298,
      282,  298,  299,  282,  299,  300,  282,  301,  282,  301,
      302,  282,  303,  282,  304,  282,  305,  282,  305,  306,
      282,  307,  282,  308,  282,  309,  282,  309,  282,  282,
      310,  282,  310,  282,  282,  282,  298,  282,  298,  282,
      299,  282,  299,  282,  300,  282,  301,  282,  301,  282,
      302,  282,  303,  282,  304,  282,  282,  305,  282,  305,

      282,  306,  282,  307,  282,  308,  282,  282,  309,  282,
      309,  282,  282,  310,  282,  310,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,    0,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  282
    } ;

static const flex_int32_t yy_nxt[341] =
    {   0,
      114,   35,   36,  109,   37,   35,   36,  106,   37,   38,
       39,   38,   39,   41,   42,   41,   42,   44,   45,   44,
       45,   49,   50,   49,   50,   58,   59,   58,   59,   67,
       68,   67,   68,   34,   34,  104,   70,   70,   72,   73,
       72,   73,   78,   79,   80,   79,   82,   83,   84,   83,
       88,   89,   90,   89,   99,  100,  101,  100,  110,  111,
      112,  111,  115,  116,  117,  116,   78,   79,  119,   79,
       82,   83,  120,   83,   88,   89,  121,   89,   99,  100,
      122,  100,  110,  111,  123,  111,  115,  116,  125,  116,
      128,  189,  102,  190,   98,   95,   93,   91,   87,   85,

       81,  129,   77,  130,  140,   71,  141,   69,   66,   64,
       62,  142,   60,  143,   57,   55,  144,   53,   51,  145,
      146,   48,  147,   46,   43,   40,   34,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,

      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      198,  197,  196,  195,  194,  193,  192,  191,  188,  187,
      186,  185,  184,  183,  182,  181,  180,  179,  178,  177,
      176,  175,  174,  173,  172,  171,  170,  169,  168,  167,
      166,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      156,  155,  154,  153,  152,  151,  150,  149,  148,  139,
      138,  137,  136,  135,  134,  133,  132,  131,  127,  126,
      124,  107,  105,  103,   96,   94,   92,   86,  118,  113,
      108,  107,  105,  103,   97,   96,   94,   92,   86,   76,
       75,   74,  282,   65,   65,   63,   63,   61,   61,   56,

       56,   54,   54,   52,   52,   47,   47,   33,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282
    } ;

static const flex_int32_t yy_chk[341] =
    {   0,
      310,    1,    1,  309,    1,    2,    2,  308,    2,    3,
        3,    4,    4,    5,    5,    6,    6,    7,    7,    8,
        8,   11,   11,   12,   12,   19,   19,   20,   20,   27,
       27,   28,   28,   29,   30,  307,   29,   30,   31,   31,
       32,   32,   40,   40,   42,   42,   43,   43,   45,   45,
       48,   48,   50,   50,   57,   57,   59,   59,   66,   66,
       68,   68,   71,   71,   73,   73,   77,   77,   79,   79,
       81,   81,   83,   83,   87,   87,   89,   89,   98,   98,
      100,  100,  109,  109,  111,  111,  114,  114,  116,  116,
      126,  180,  306,  180,  305,  304,  303,  302,  301,  300,

      299,  126,  298,  126,  136,  297,  136,  296,  295,  294,
      293,  136,  292,  136,  291,  290,  136,  289,  288,  136,
      136,  287,  136,  286,  285,  284,  283,  280,  279,  277,
      276,  275,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  260,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  237,  236,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,

      199,  198,  197,  196,  195,  194,  193,  192,  191,  189,
      188,  187,  186,  185,  184,  183,  182,  181,  179,  178,
      177,  176,  175,  174,  173,  172,  171,  170,  169,  168,
      167,  166,  165,  164,  163,  162,  161,  160,  159,  158,
      157,  156,  155,  154,  153,  152,  151,  150,  149,  147,
      146,  145,  144,  143,  142,  141,  140,  139,  137,  135,
      134,  133,  132,  131,  130,  129,  128,  127,  124,  118,
      113,  106,  104,  102,   95,   93,   91,   85,   75,   70,
       65,   64,   62,   60,   56,   55,   53,   51,   46,   39,
       37,   36,   33,   26,   25,   24,   23,   22,   21,   18,

       17,   16,   15,   14,   13,   10,    9,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282
    } ;

static const flex_int32_t yy_rule_linenum[44] =
    {   0,
      141,  146,  153,  160,  167,  174,  181,  187,  194,  201,
      203,  209,  215,  222,  231,  237,  241,  247,  255,  261,
      265,  271,  276,  282,  286,  309,  313,  319,  323,  329,
      334,  340,  344,  366,  371,  377,  381,  387,  392,  395,
      399,  405,  411
    } ;


#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}


#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET

  // *WORKAROUND*
//  #include <iostream>
  #include <sstream>
  //using namespace std;
  //// *IMPORTANT NOTE*: several ACE headers inclue ace/iosfwd.h, which introduces
  ////                   a problem in conjunction with the standard include headers
  ////                   when ACE_USES_OLD_IOSTREAMS is defined
  ////                   --> include the necessary headers manually (see above), and
  ////                       prevent ace/iosfwd.h from causing any harm
  //#define ACE_IOSFWD_H

  #include "m3u_scanner.h"
  #include "m3u_parser.h"
  #include "common_parser_m3u_parser_driver.h"

  // the original yyterminate() macro returns int. Since this uses Bison 3
  // variants as tokens, redefine it to change type to `Parser::semantic_type`
  #define yyterminate() return yy::parser::token::END;

  // this tracks the current scanner location. Action is called when length of
  // the token is known
  #define YY_USER_ACTION location->columns (yyleng);
/* *TODO*: find out why 'read' does not compile (on Linux, flex 2.5.39) */
/* %option full */
/* %option yylineno */
/*%option ansi-definitions ansi-prototypes*/
/*%option c++*/
/*%option yyclass="Common_BencodingScanner"*/
/* *NOTE*: for protcol specification, see:
           - http://bittorrent.org/beps/bep_0003.html
           - https://wiki.theory.org/BitTorrentSpecification */














/* handle locations */
/*#define YY_USER_ACTION yylloc.first_line = yylloc.last_line = yylineno; \
                       yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1; \
                       yycolumn += yyleng; */
//#define YY_USER_ACTION yylloc->columns (yyleng);



#define INITIAL 0
#define state_no_value 1
#define state_value 2
#define state_date_time 3
#define state_ext_inf 4
#define state_ext_inf_title 5
#define state_ext_stream_inf_key_value 6
#define state_ext_stream_inf_next_value_comma 7
#define state_ext_stream_inf_next_value_quotation 8
#define state_ext_stream_inf_is_last_value 9
#define state_media_key_value 10
#define state_media_next_value_comma 11
#define state_media_next_value_quotation 12
#define state_media_is_last_value 13
#define state_url_1 14
#define state_url_2 15




#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif



/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */


/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;


    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;



    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;






    }; /* end struct yyguts_t */



/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */


    

    


int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( yyscan_t yyscanner );



int yyget_debug ( yyscan_t yyscanner );



void yyset_debug ( int debug_flag , yyscan_t yyscanner );



YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );



void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );



FILE *yyget_in ( yyscan_t yyscanner );



void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );



FILE *yyget_out ( yyscan_t yyscanner );



void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );



			int yyget_leng ( yyscan_t yyscanner );



char *yyget_text ( yyscan_t yyscanner );



int yyget_lineno ( yyscan_t yyscanner );



void yyset_lineno ( int _line_number , yyscan_t yyscanner );




int yyget_column  ( yyscan_t yyscanner );





void yyset_column ( int _column_no , yyscan_t yyscanner );



/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif


/* %if-c-only */





    
    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    
    static int yy_top_state ( yyscan_t yyscanner );
    



/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	errno=0; \
	while ( (result = (int) read( fileno(yyin), buf, (yy_size_t) max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif


/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */


/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */









extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION


/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;







	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif


        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
        if ( ! yyg->yy_state_buf )
            YY_FATAL_ERROR( "out of dynamic memory in yylex()" );


		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */



  /* code to place at the beginning of yylex() */

  // reset location
  location->step ();

  std::stringstream converter;

  // sanity check(s)
  ACE_ASSERT (parser);
  ACE_Message_Block* message_block_p = parser->buffer ();
  ACE_ASSERT (message_block_p);
  ACE_ASSERT (yyscanner);

//  location.columns (yyleng);



	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 283 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 282 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */


do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 44 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 44 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 45 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */

case 1:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->lval,
                                                      struct M3U_Playlist);
                                    ACE_ASSERT (yylval->lval);
                                    return yy::parser::token::EXT3MU; }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = ACE_TEXT_ALWAYS_CHAR ("INDEPENDENT-SEGMENTS");
                                    BEGIN (state_no_value);
                                    return yy::parser::token::KEY; }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = ACE_TEXT_ALWAYS_CHAR ("TARGETDURATION");
                                    BEGIN (state_value);
                                    return yy::parser::token::KEY; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = ACE_TEXT_ALWAYS_CHAR ("ALLOW-CACHE");
                                    BEGIN (state_value);
                                    return yy::parser::token::KEY; }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = ACE_TEXT_ALWAYS_CHAR ("VERSION");
                                    BEGIN (state_value);
                                    return yy::parser::token::KEY; }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = ACE_TEXT_ALWAYS_CHAR ("MEDIA-SEQUENCE");
                                    BEGIN (state_value);
                                    return yy::parser::token::KEY; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_media_key_value);
                                    ACE_NEW_NORETURN (yylval->emval,
                                                      struct M3U_Media_Element);
                                    ACE_ASSERT (yylval->emval);
                                    return yy::parser::token::BEGIN_MEDIA; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = ACE_TEXT_ALWAYS_CHAR ("DISCONTINUITY");
                                    BEGIN (state_no_value);
                                    return yy::parser::token::KEY; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = ACE_TEXT_ALWAYS_CHAR ("DISCONTINUITY-SEQUENCE");
                                    BEGIN (state_value);
                                    return yy::parser::token::KEY; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_date_time); }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_ext_stream_inf_key_value);
                                    ACE_NEW_NORETURN (yylval->esval,
                                                      struct M3U_StreamInf_Element);
                                    ACE_ASSERT (yylval->esval);
                                    return yy::parser::token::BEGIN_EXT_STREAM_INF; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_ext_inf);
                                    ACE_NEW_NORETURN (yylval->eeval,
                                                      struct M3U_ExtInf_Element);
                                    ACE_ASSERT (yylval->eeval);
                                    return yy::parser::token::BEGIN_EXTINF; }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    if (parser->hasFinished ()) // ignore spurious LFs
                                      return yy::parser::token::LF;
                                  }
	YY_BREAK
// end <INITIAL>

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = ACE_TEXT_ALWAYS_CHAR ("");
                                    BEGIN (INITIAL);
                                    return yy::parser::token::VALUE; }
	YY_BREAK
// end <state_no_value>

case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = yytext;
                                    return yy::parser::token::VALUE; }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (INITIAL); }
	YY_BREAK
// end <state_value>

case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                      std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = yytext;
                                    return yy::parser::token::DATETIME; }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    if (parser->pop_state ())
                                      yy_pop_state (yyscanner);
                                    else
                                      BEGIN (INITIAL); }
	YY_BREAK
// end <state_date_time>

case 19:
/* rule 19 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    converter.str (ACE_TEXT_ALWAYS_CHAR (""));
                                    converter.clear ();
                                    converter << yytext;
                                    converter >> yylval->ival;
                                    return yy::parser::token::LENGTH; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_ext_inf_title); }
	YY_BREAK
// end <state_ext_inf>

case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                      std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = yytext;
                                    return yy::parser::token::TITLE; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_url_1); }
	YY_BREAK
// end <state_key_value>

case 23:
/* rule 23 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = yytext;
                                    return yy::parser::token::KEY; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_ext_stream_inf_is_last_value); }
	YY_BREAK
// end <state_ext_stream_inf_key_value>

case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{
                                    std::string test_string = yytext;
                                    // *TODO*: actually, need to test whether ','
                                    // does NOT appear between '"'s
                                    if (test_string.find_first_of (',') == std::string::npos)
                                    { parser->offset (yyleng);
                                      ACE_NEW_NORETURN (yylval->sval,
                                                        std::string);
                                      ACE_ASSERT (yylval->sval);
                                      *(yylval->sval) = yytext;
                                      return yy::parser::token::VALUE;
                                    } // end IF
                                    if (test_string[0] == '"')
                                    { parser->offset (1);
                                      BEGIN (state_ext_stream_inf_next_value_quotation);
                                      yyless (1);
                                    } // end IF
                                    else
                                    {
                                      BEGIN (state_ext_stream_inf_next_value_comma);
                                      yyless (0);
                                    } // end IF
                                  }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_url_1); }
	YY_BREAK
// end <state_ext_stream_inf_is_last_value>

case 27:
/* rule 27 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                      std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = yytext;
                                    return yy::parser::token::VALUE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                     BEGIN (state_ext_stream_inf_key_value); }
	YY_BREAK
// end <state_inf_next_value_comma>

case 29:
/* rule 29 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                      std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = yytext;
                                    return yy::parser::token::VALUE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                     BEGIN (state_ext_stream_inf_key_value); }
	YY_BREAK
// end <state_inf_next_value_quotation>

case 31:
/* rule 31 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                      std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = yytext;
                                    return yy::parser::token::KEY; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_media_is_last_value); }
	YY_BREAK
// end <state_media_key_value>

case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
{ std::string test_string = yytext;
                                    // *TODO*: actually, need to test whether ','
                                    // does NOT appear between '"'s
                                    if (test_string.find_first_of (',') == std::string::npos)
                                    { parser->offset (yyleng);
                                      ACE_NEW_NORETURN (yylval->sval,
                                                       std::string);
                                      ACE_ASSERT (yylval->sval);
                                      *(yylval->sval) = yytext;
                                      return yy::parser::token::VALUE;
                                    } // end IF
                                    if (test_string[0] == '"')
                                    { parser->offset (1);
                                      BEGIN (state_media_next_value_quotation);
                                      yyless (1);
                                    } // end IF
                                    else
                                    {
                                      BEGIN (state_media_next_value_comma);
                                      yyless (0);
                                    } // end IF
                                  }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (INITIAL);
                                    return yy::parser::token::END_OF_ELEMENT; }
	YY_BREAK
// end <state_media_is_last_value>

case 35:
/* rule 35 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                      std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = yytext;
                                    return yy::parser::token::VALUE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_media_key_value); }
	YY_BREAK
// end <state_media_next_value_comma>

case 37:
/* rule 37 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                      std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = yytext;
                                    return yy::parser::token::VALUE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (state_media_key_value); }
	YY_BREAK
// end <state_media_next_value_quotation>

case 39:
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    parser->pop_next ();
                                    yy_push_state (state_date_time, yyscanner); }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ yyless (0);
                                    BEGIN (state_url_2); }
	YY_BREAK
// end <state_url_1>

case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    ACE_NEW_NORETURN (yylval->sval,
                                                     std::string);
                                    ACE_ASSERT (yylval->sval);
                                    *(yylval->sval) = yytext;
                                    return yy::parser::token::URL; }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{ parser->offset (yyleng);
                                    BEGIN (INITIAL);
                                    return yy::parser::token::END_OF_ELEMENT; }
	YY_BREAK
// end <state_url_2>
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_no_value):
case YY_STATE_EOF(state_value):
case YY_STATE_EOF(state_date_time):
case YY_STATE_EOF(state_ext_inf):
case YY_STATE_EOF(state_ext_inf_title):
case YY_STATE_EOF(state_ext_stream_inf_key_value):
case YY_STATE_EOF(state_ext_stream_inf_next_value_comma):
case YY_STATE_EOF(state_ext_stream_inf_next_value_quotation):
case YY_STATE_EOF(state_ext_stream_inf_is_last_value):
case YY_STATE_EOF(state_media_key_value):
case YY_STATE_EOF(state_media_next_value_comma):
case YY_STATE_EOF(state_media_next_value_quotation):
case YY_STATE_EOF(state_media_is_last_value):
case YY_STATE_EOF(state_url_1):
case YY_STATE_EOF(state_url_2):
{ return yy::parser::token::END; }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ /* *TODO*: use (?s:.) ? */
                                   // wait for more data fragment(s)
                                   if (!parser->switchBuffer ())
                                   { // *NOTE*: most probable reason: connection
                                     //         has been closed --> session end
                                     ACE_DEBUG ((LM_DEBUG,
                                                 ACE_TEXT ("failed to Common_IParser::switchBuffer(), returning\n")));
                                     yyterminate(); // not enough data, cannot proceed
                                   } // end IF
                                   yyless (0); }
	YY_BREAK
case 44:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */


/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;


	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 283 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 283 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 282);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}


/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

    
        b->yy_is_interactive = 0;
    

/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */


/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */


/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */





/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */




/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */




/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */




/* %if-c-only */
    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}




/* %if-c-only */
    static void yy_pop_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}




/* %if-c-only */
    static int yy_top_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}


#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */


/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}




/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}




/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}



/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}



/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}


/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}


/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */


/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}




/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}





/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}



void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}




int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}



void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */


/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}


/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;


    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;



    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;




/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */


/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;


    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;



    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;


    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */




/* %ok-for-header */




#include "common_macros.h"

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */
int
M3U_wrap (yyscan_t yyscanner)
{
  COMMON_TRACE (ACE_TEXT ("::M3U_wrap"));

  // sanity check(s)
//  struct yyguts_t* yyg = static_cast<struct yyguts_t*> (yyscanner);
  Common_Parser_M3U_ParserDriver* driver =
    static_cast<Common_Parser_M3U_ParserDriver*> (M3U_get_extra (yyscanner));
  ACE_ASSERT (driver);
//  if (driver->hasFinished ())
//    return 1; // done
//  ACE_ASSERT (driver->fragment_);

  // *NOTE*: there is more data
  // 1. switch buffers
  // 2. continue scanning

  // step1
  if (!driver->switchBuffer ())
  {
    ACE_DEBUG ((LM_ERROR,
                ACE_TEXT ("failed to Common_ParserBase_T::switchBuffer(), aborting\n")));
    return 1;
  } // end IF

  // step2
  return 0;
}
#ifdef __cplusplus
}
#endif /* __cplusplus */

