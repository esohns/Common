// -*- C++ -*-
//
// generated by wxGlade
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//
#include "stdafx.h"

#include "test_i_2.h"

#include "wx/cmdline.h"
#include "wx/xrc/xmlres.h"

#include "ace/Log_Msg.h"
#include "ace/OS_Memory.h"

#include "common_file_tools.h"

#include "common_test_i_defines.h"

// begin wxGlade: ::extracode
// end wxGlade



wxDialog_main::wxDialog_main (wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
 : wxDialog (parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
  // begin wxGlade: wxDialog_main::wxDialog_main
//  button_1 = new wxButton(this, wxID_NEW, wxEmptyString);
//  button_2 = new wxButton(this, wxID_COPY, wxEmptyString);
//  button_3 = new wxButton(this, wxID_CLEAR, wxEmptyString);

//  set_properties();
//  do_layout();
  // end wxGlade
}

void wxDialog_main::set_properties ()
{
  // begin wxGlade: wxDialog_main::set_properties
  SetTitle(wxT("dialog"));
  button_1->SetFocus();
  button_1->SetDefault();
  button_3->Enable(0);
  // end wxGlade
}


void wxDialog_main::do_layout ()
{
  // begin wxGlade: wxDialog_main::do_layout
  wxBoxSizer* sizer_v_main = new wxBoxSizer (wxVERTICAL);
  sizer_v_main->Add(button_1, 0, 0, 0);
  sizer_v_main->Add(button_2, 0, 0, 0);
  sizer_v_main->Add(button_3, 0, 0, 0);
  SetSizer(sizer_v_main);
  sizer_v_main->Fit(this);
  Layout();
  // end wxGlade
}


//BEGIN_EVENT_TABLE(wxDialog_main, wxDialog)
//  // begin wxGlade: wxDialog_main::event_table
//  EVT_BUTTON(wxID_ANY, wxDialog_main::button_1_clicked_cb)
//  EVT_BUTTON(wxID_ANY, wxDialog_main::button_2_clicked_cb)
//  EVT_BUTTON(wxID_ANY, wxDialog_main::button_3_clicked_cb)
//  // end wxGlade
//END_EVENT_TABLE();


void wxDialog_main::button_1_clicked_cb (wxCommandEvent &event)  // wxGlade: wxDialog_main.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
//  wxLogDebug(wxT("Event handler (wxDialog_main::button_1_clicked_cb) not implemented yet"));
  ACE_DEBUG ((LM_DEBUG,
              ACE_TEXT ("button 1, clicked\n")));
}

void wxDialog_main::button_2_clicked_cb (wxCommandEvent &event)  // wxGlade: wxDialog_main.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
//  wxLogDebug(wxT("Event handler (wxDialog_main::button_2_clicked_cb) not implemented yet"));
  ACE_DEBUG ((LM_DEBUG,
              ACE_TEXT ("button 2, clicked\n")));
}

void wxDialog_main::button_3_clicked_cb (wxCommandEvent &event)  // wxGlade: wxDialog_main.<event_handler>
{
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
//  wxLogDebug(wxT("Event handler (wxDialog_main::button_3_clicked_cb) not implemented yet"));
  ACE_DEBUG ((LM_DEBUG,
              ACE_TEXT ("button 3, clicked\n")));
}

void wxDialog_main::on_close_cb (wxCloseEvent& event)  // wxGlade: wxDialog_main.<event_handler>
{
  wxWindow* parent_p = this->GetParent ();
  ACE_ASSERT (parent_p);
  parent_p->RemoveChild (this);
  event.Skip();
  // notify the user that he hasn't implemented the event handler yet
//  wxLogDebug(wxT("Event handler (wxDialog_main::button_3_clicked_cb) not implemented yet"));
  ACE_DEBUG ((LM_DEBUG,
              ACE_TEXT ("close, clicked\n")));

  //wxTheApp->Exit ();
  this->Destroy ();
  //this->EndModal (0);
}

// wxGlade: add wxDialog_main event handlers

class Test_U_wxWidgets_Application
 : public wxApp {
 public:
  bool OnInit ();
  void OnInitCmdLine (wxCmdLineParser&);
  void OnEndSession (wxCloseEvent&);
  void OnQueryEndSession (wxCloseEvent&);
  int OnExit ();

 private:
  wxDialog* dialog_;
};

#if wxCHECK_VERSION (3,0,0)
wxIMPLEMENT_APP (Test_U_wxWidgets_Application);
#elif wxCHECK_VERSION (2,0,0)
IMPLEMENT_APP (Test_U_wxWidgets_Application)

void wxApp::OnAssertFailure (const wxChar *file,
                             int line,
                             const wxChar *func,
                             const wxChar *cond,
                             const wxChar *msg) {};
void wxAppConsole::OnAssert (const wxChar *file,
                             int line,
                             const wxChar *cond,
                             const wxChar *msg) {};
#endif // wxCHECK_VERSION

void Test_U_wxWidgets_Application::OnInitCmdLine (wxCmdLineParser& parser)
{
  wxApp::OnInitCmdLine (parser);

  //parser.AddSwitch ("v", "version", "Shows the application version", 0);
  parser.Parse (true);

  Common_File_Tools::initialize (ACE_TEXT_ALWAYS_CHAR (wxAppConsole::argv[0]));
}

bool Test_U_wxWidgets_Application::OnInit ()
{
  wxInitAllImageHandlers ();

  if (!wxAppConsole::OnInit ())
  {
    ACE_DEBUG ((LM_ERROR,
                ACE_TEXT ("failed to wxAppConsole::OnInit(), aborting\n")));
    return false;
  } // end IF

  // step0: initialize XRC
  wxXmlResource* resource_p = wxXmlResource::Get ();
  if (!resource_p)
  {
    ACE_DEBUG ((LM_ERROR,
                ACE_TEXT ("failed to wxXmlResource::Get(): \"%m\", aborting\n")));
    return false;
  } // end IF
  resource_p->InitAllHandlers ();

  // load widget tree
  std::string module_name =
      ACE_TEXT_ALWAYS_CHAR (COMMON_LOCATION_TEST_I_SUBDIRECTORY);
  module_name += ACE_DIRECTORY_SEPARATOR_STR;
  module_name += ACE_TEXT_ALWAYS_CHAR (COMMON_TEST_I_UI_SUBDIRECTORY);
  std::string path_root =
    Common_File_Tools::getConfigurationDataDirectory (ACE_TEXT_ALWAYS_CHAR (Common_PACKAGE_NAME),
                                                      module_name,
                                                      true);

  std::string file_path = path_root;
  file_path += ACE_DIRECTORY_SEPARATOR_CHAR_A;
  file_path += ACE_TEXT_ALWAYS_CHAR ("test_i_2.xrc");
#if wxCHECK_VERSION (3,0,0)
  wxFileName file_name;
  file_name.Assign (wxString (file_path),
                    wxPATH_NATIVE);
  if (!resource_p->LoadFile (file_name))
#elif wxCHECK_VERSION (2,0,0)
  wxString file_name (file_path);
  if (unlikely (!resource_p->Load (file_name)))
#endif // wxCHECK_VERSION
  {
#if wxCHECK_VERSION (3,0,0)
    ACE_DEBUG ((LM_ERROR,
                ACE_TEXT ("failed to wxXmlResource::LoadFile(\"%s\"): \"%m\", aborting\n"),
                ACE_TEXT ("test_i_2.xrc")));
#elif wxCHECK_VERSION (2,0,0)
    ACE_DEBUG ((LM_ERROR,
                ACE_TEXT ("failed to wxXmlResource::Load(\"%s\"): \"%m\", aborting\n"),
                ACE_TEXT ("test_i_2.xrc")));
#endif // wxCHECK_VERSION
    return false;
  } // end IF

  wxDialog_main* dialog_main_p = NULL;
  ACE_NEW_NORETURN (dialog_main_p,
                    wxDialog_main (NULL,
                                   wxID_ANY,
                                   wxEmptyString,
                                   wxDefaultPosition,
                                   wxDefaultSize,
                                   wxDEFAULT_DIALOG_STYLE));
//  wxDialog dialog_s;
 //  if (!resource_p->LoadDialog (&dialog_s,
//                               dialog_main,
//                               wxString (ACE_TEXT_ALWAYS_CHAR ("dialog_main_base"))))
//  {
//    ACE_DEBUG ((LM_ERROR,
//                ACE_TEXT ("failed to wxXmlResource::LoadDialog(\"%s\"): \"%m\", aborting\n"),
//                ACE_TEXT ("dialog_main")));
//    return false;
//  } // end IF
  dialog_ =
    resource_p->LoadDialog (dialog_main_p,
                            wxString (ACE_TEXT_ALWAYS_CHAR ("dialog_main_base")));
  ACE_ASSERT (dialog_);
  ACE_DEBUG ((LM_DEBUG,
              ACE_TEXT ("loaded widget tree \"%s\"\n"),
              ACE_TEXT (file_path.c_str ())));

  SetTopWindow (dialog_main_p);
//  dialog_main->Show (true);
  dialog_->Show (true);

  Bind (wxEVT_COMMAND_BUTTON_CLICKED, &wxDialog_main::button_1_clicked_cb, dialog_main_p, wxID_NEW);
//  Connect (XRCID("button_1"), wxEVT_COMMAND_BUTTON_CLICKED, (wxObjectEventFunction)&wxDialog_main::button_1_clicked_cb);
  Bind (wxEVT_COMMAND_BUTTON_CLICKED, &wxDialog_main::button_2_clicked_cb, dialog_main_p, wxID_COPY);
  Bind (wxEVT_COMMAND_BUTTON_CLICKED, &wxDialog_main::button_3_clicked_cb, dialog_main_p, wxID_CLEAR);
  dialog_->Connect (wxEVT_CLOSE_WINDOW, wxCloseEventHandler (wxDialog_main::on_close_cb), NULL, dialog_);

  return true;
}

void
Test_U_wxWidgets_Application::OnEndSession (wxCloseEvent& event_in)
{
  ACE_UNUSED_ARG (event_in);

  ACE_ASSERT (dialog_);
  dialog_->Close ();
}

void
Test_U_wxWidgets_Application::OnQueryEndSession (wxCloseEvent& event_in)
{
  ACE_UNUSED_ARG (event_in);

  ACE_ASSERT (dialog_);
  dialog_->Close ();
}

int
Test_U_wxWidgets_Application::OnExit ()
{
  return 0;
}
