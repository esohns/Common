set (LIBTORCH_SUPPORT_DEFAULT ON)
if (UNIX)
 set (Torch_DIR /usr/local/src/libtorch/share/cmake/Torch)
 set (CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};/usr/share/rocm/cmake;/usr/share/rocmcmakebuildtools/cmake;/usr/lib64/cmake/hip")
 set (USE_ROCM ON)
 set (HIP_SUPPORTED_ARCHS "gfx90a")
 set (ROCM_PATH /usr/lib64/rocm)
 find_package (Torch)
 if (TORCH_FOUND)
# pkg_check_modules (PKG_LIBTORCH libtorch)
# if (PKG_LIBTORCH_FOUND)
  set (LIBTORCH_FOUND TRUE)
#set (LIBTORCH_INCLUDE_DIRS "${PKG_LIBTORCH_INCLUDE_DIRS}")
#set (LIBTORCH_LIBRARIES "${PKG_LIBTORCH_LIBRARIES}")
  set (LIBTORCH_INCLUDE_DIRS "${TORCH_INCLUDE_DIRS}")
  set (LIBTORCH_LIBRARIES "${TORCH_LIBRARIES}")
 else ()
  if (EXISTS $ENV{LIBTORCH_ROOT})
   set (LIBTORCH_ROOT $ENV{LIBTORCH_ROOT})
  else ()
   #set (LIBTORCH_ROOT $ENV{LIB_ROOT}/libtorch)
   set (LIBTORCH_ROOT /usr/local/src/libtorch)
  endif (EXISTS $ENV{LIBTORCH_ROOT})
  find_library (C10_LIBRARY libc10.so
                PATHS ${LIBTORCH_ROOT}
                PATH_SUFFIXES lib
                DOC "searching for libc10.so"
                NO_DEFAULT_PATH)
  if (NOT C10_LIBRARY)
   message (WARNING "could not find libc10.so, continuing")
  else ()
   message (STATUS "Found libc10.so library \"${C10_LIBRARY}\"")
  endif (NOT C10_LIBRARY)
  find_library (LIBTORCH_LIBRARY libtorch.so
                PATHS ${LIBTORCH_ROOT}
                PATH_SUFFIXES lib
                DOC "searching for libtorch.so"
                NO_DEFAULT_PATH)
  if (NOT LIBTORCH_LIBRARY)
   message (WARNING "could not find libtorch.so, continuing")
  else ()
   message (STATUS "Found libtorch.so library \"${LIBTORCH_LIBRARY}\"")
  endif (NOT LIBTORCH_CPU_LIBRARY)
  find_library (LIBTORCH_CPU_LIBRARY libtorch_cpu.so
                PATHS ${LIBTORCH_ROOT}
                PATH_SUFFIXES lib
                DOC "searching for libtorch_cpu.so"
                NO_DEFAULT_PATH)
  if (NOT LIBTORCH_CPU_LIBRARY)
   message (WARNING "could not find libtorch_cpu.so, continuing")
  else ()
   message (STATUS "Found libtorch_cpu.so library \"${LIBTORCH_CPU_LIBRARY}\"")
  endif (NOT LIBTORCH_CPU_LIBRARY)
  if (C10_LIBRARY AND LIBTORCH_LIBRARY AND LIBTORCH_CPU_LIBRARY)
   set (LIBTORCH_FOUND TRUE)
   set (LIBTORCH_LIBRARIES "${C10_LIBRARY};${LIBTORCH_LIBRARY};${LIBTORCH_CPU_LIBRARY}")
   set (LIBTORCH_INCLUDE_DIRS "${LIBTORCH_ROOT}/include;${LIBTORCH_ROOT}/include/torch/csrc/api/include")
  endif (C10_LIBRARY AND LIBTORCH_LIBRARY)
 endif (TORCH_FOUND)
# endif (PKG_LIBTORCH_FOUND)
elseif (WIN32)
 if (VCPKG_USE)
  find_package (libtorch CONFIG)
  if (LIBTORCH_FOUND)
   set (LIBTORCH_FOUND TRUE)
   set (LIBTORCH_INCLUDE_DIRS ${VCPKG_INCLUDE_DIR})
   set (LIBTORCH_LIBRARIES ${VCPKG_LIB_DIR}/torch_cpu.lib)
   set (LIBTORCH_LIB_DIR "${VCPKG_BIN_DIR}")
  endif (LIBTORCH_FOUND)
 endif (VCPKG_USE)
 if (NOT LIBTORCH_FOUND)
  if (EXISTS $ENV{LIBTORCH_ROOT})
   set (LIBTORCH_ROOT $ENV{LIBTORCH_ROOT})
  else ()
   set (LIBTORCH_ROOT $ENV{LIB_ROOT}/libtorch)
  endif (EXISTS $ENV{LIBTORCH_ROOT})
  find_library (C10_LIBRARY c10.lib
                PATHS ${LIBTORCH_ROOT}
                PATH_SUFFIXES lib
                DOC "searching for c10.lib"
                NO_DEFAULT_PATH)
  if (NOT C10_LIBRARY)
   message (WARNING "could not find c10.lib, continuing")
  else ()
   message (STATUS "Found c10.lib library \"${C10_LIBRARY}\"")
  endif (NOT LIBTORCH_LIBRARY)
  find_library (LIBTORCH_LIBRARY torch_cpu.lib
                PATHS ${LIBTORCH_ROOT}
                PATH_SUFFIXES lib
                DOC "searching for torch_cpu.lib"
                NO_DEFAULT_PATH)
  if (NOT LIBTORCH_LIBRARY)
   message (WARNING "could not find torch_cpu.lib, continuing")
  else ()
   message (STATUS "Found torch_cpu.lib library \"${LIBTORCH_LIBRARY}\"")
  endif (NOT LIBTORCH_LIBRARY)
  if (C10_LIBRARY AND LIBTORCH_LIBRARY)
   set (LIBTORCH_FOUND TRUE)
   set (LIBTORCH_LIBRARIES "${C10_LIBRARY};${LIBTORCH_LIBRARY}")
   set (LIBTORCH_INCLUDE_DIRS "${LIBTORCH_ROOT}/include;${LIBTORCH_ROOT}/include/torch/csrc/api/include")
   set (LIBTORCH_LIB_DIR "${LIBTORCH_ROOT}/lib")
  endif (LIBTORCH_LIBRARY)
 endif (NOT LIBTORCH_FOUND)
endif ()
if (LIBTORCH_FOUND)
 option (LIBTORCH_SUPPORT "enable libtorch support" ${LIBTORCH_SUPPORT_DEFAULT})
 if (LIBTORCH_SUPPORT)
  add_definitions (-DLIBTORCH_SUPPORT)
 endif (LIBTORCH_SUPPORT)
endif (LIBTORCH_FOUND)
