# *TODO*: verify implementation availability
option (EXCEPTION_SUPPORT "support C/C++ exceptions" ON)
include (CMakeDependentOption)
if (UNIX)
# option (EXCEPTION_CPP_SUPPORT "support ISO C++ exceptions" ON)
 CMAKE_DEPENDENT_OPTION (EXCEPTION_CPP_SUPPORT "enable ISO C++ exceptions support" ON
                         "EXCEPTION_SUPPORT" OFF)
elseif (WIN32)
# option (EXCEPTION_CPP_SUPPORT "support ISO C++ exceptions" ON)
 CMAKE_DEPENDENT_OPTION (EXCEPTION_CPP_SUPPORT "enable ISO C++ exceptions support" ON
                         "EXCEPTION_SUPPORT" OFF)
# option (EXCEPTION_SEH_SUPPORT "support Win32 Structured Exceptions (SEH)" OFF)
 CMAKE_DEPENDENT_OPTION (EXCEPTION_SEH_SUPPORT "enable Win32 Structured Exceptions (SEH) support" ON
                         "EXCEPTION_SUPPORT; NOT EXCEPTION_CPP_SUPPORT" OFF)
endif ()

# *NOTE*: the first entry is the default option
if (UNIX)
 set (EXCEPTION_IMPLEMENTATION "CPP" CACHE STRING "use ISO C++ exceptions (default)")

 set_property (CACHE EXCEPTION_IMPLEMENTATION PROPERTY STRINGS "CPP")
elseif (WIN32)
 set (EXCEPTION_IMPLEMENTATION "CPP" CACHE STRING "use ISO C++ exceptions (default)")
 set (EXCEPTION_IMPLEMENTATION "SEH" CACHE STRING "use Win32 Structured Exceptions (SEH)")

 set_property (CACHE EXCEPTION_IMPLEMENTATION PROPERTY STRINGS "CPP" "SEH")
endif ()

if (NOT (DEFINED EXCEPTION_IMPLEMENTATION_LAST))
 set (EXCEPTION_IMPLEMENTATION_LAST "NotAnImplementation" CACHE STRING "last C/C++ exception implementation used")
 mark_as_advanced (FORCE EXCEPTION_IMPLEMENTATION_LAST)
endif ()
if (NOT (${EXCEPTION_IMPLEMENTATION} MATCHES ${EXCEPTION_IMPLEMENTATION_LAST}))
 if (UNIX)
  unset (EXCEPTION_CPP_USE CACHE)
 elseif (WIN32)
  unset (EXCEPTION_CPP_USE CACHE)
  unset (EXCEPTION_SEH_USE CACHE)
 endif ()
  set (EXCEPTION_IMPLEMENTATION_LAST ${EXCEPTION_IMPLEMENTATION} CACHE STRING "Updating C/C++ Exception Implementation Option" FORCE)
endif ()

if (UNIX)
 if (${EXCEPTION_IMPLEMENTATION} MATCHES "CPP")
  if (NOT EXCEPTION_CPP_SUPPORT)
   message (FATAL_ERROR "ISO C++ exceptions not supported")
  endif ()
  set (EXCEPTION_CPP_USE ON CACHE STRING "use ISO C++ exceptions")
  mark_as_advanced (FORCE EXCEPTION_CPP_USE)
  add_definitions (-DEXCEPTION_CPP_USE)
 endif ()
elseif (WIN32)
 if (${EXCEPTION_IMPLEMENTATION} MATCHES "CPP")
  if (NOT EXCEPTION_CPP_SUPPORT)
   message (FATAL_ERROR "ISO C++ exceptions not supported")
  endif ()
  set (EXCEPTION_CPP_USE ON CACHE STRING "use ISO C++ exceptions")
  mark_as_advanced (FORCE EXCEPTION_CPP_USE)
  add_definitions (-DEXCEPTION_CPP_USE)
 elseif (${EXCEPTION_IMPLEMENTATION} MATCHES "SEH")
  if (NOT EXCEPTION_SEH_SUPPORT)
   message (FATAL_ERROR "Win32 Structured Exceptions (SEH) not supported")
  endif ()
  set (EXCEPTION_SEH_USE ON CACHE STRING "use Win32 Structured Exceptions (SEH)")
  mark_as_advanced (FORCE EXCEPTION_SEH_USE)
  add_definitions (-DEXCEPTION_SEH_USE)
 endif ()
endif ()

